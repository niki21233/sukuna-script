--sukuna
print (enjoi)
local player = game.Players.LocalPlayer
local char = player.Character
local Humanoid = char.Humanoid
local hot = player.PlayerGui:WaitForChild("Hotbar")
local hotbar = hot:WaitForChild("Backpack"):WaitForChild("Hotbar")
-- 14516273501

local function cloneToolName(slot, text)
    local toolName = slot.ToolName
    if not slot:FindFirstChild("SkibidiGame") then
        toolName.Visible = false
        local clone = toolName:Clone()
        clone.Name = "SkibidiGame"
        clone.Parent = slot
        clone.Text = text
        clone.Visible = true
    elseif slot:FindFirstChild("SkibidiGame") then
        if slot:FindFirstChild("SkibidiGame").Text ~= text then
            toolName.Visible = false
            slot:FindFirstChild("SkibidiGame").Text = text
        end
    end
end
-- 10470104242
local magichealth = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth")
local UltLabel = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth"):WaitForChild("TextLabel")
UltLabel.Visible = false
local UltLabel = UltLabel:Clone()
UltLabel.Visible = true
UltLabel.Name = "SkibidiRizzlerGyattOhio"
UltLabel.Parent = magichealth
task.spawn(function()
    while true do
     UltLabel.Text = "King's Domince"
        for _, slot in ipairs(hotbar:GetChildren()) do
            if slot:FindFirstChild("Base") and slot.Base:FindFirstChild("ToolName") then
                local toolNameText = slot.Base.ToolName.Text
                if toolNameText == "Quick Slice" then
                    cloneToolName(slot.Base, "Slash Barrage")
                elseif toolNameText == "Atmos Cleave" then
                    cloneToolName(slot.Base, "Cleave Blitz")
                elseif toolNameText == "Pinpoint Cut" then
                    cloneToolName(slot.Base, "Rising Slash")
                elseif toolNameText == "Split Second Counter" then
                    cloneToolName(slot.Base, "Flash of Defiance")
                elseif toolNameText == "Sunset" then
                    cloneToolName(slot.Base, "domain combo")
                elseif toolNameText == "Solar Cleave" then
                    cloneToolName(slot.Base, "fuga")
                elseif toolNameText == "Sunrise" then
                    cloneToolName(slot.Base, "dismantle domain")
                elseif toolNameText == "Atomic Slash" then
                    cloneToolName(slot.Base, "world cutting slash")
                end
            end
        end
        task.wait(1)
    end
end)
-- Create a ScreenGui
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WatermarkGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a TextLabel for the watermark
local watermarkLabel = Instance.new("TextLabel")
watermarkLabel.Name = "WatermarkLabel"
watermarkLabel.Text = "sukuna by beluganiki on discord version 1"  -- Customize your watermark text here
watermarkLabel.Font = Enum.Font.SourceSans
watermarkLabel.TextSize = 24  -- Set the size of the text
watermarkLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White color
watermarkLabel.BackgroundTransparency = 1  -- Make the background transparent
watermarkLabel.Position = UDim2.new(0.5, 0, 0, 10)  -- Position it at the top center
watermarkLabel.AnchorPoint = Vector2.new(0.5, 0)  -- Center the anchor point horizontally
watermarkLabel.Parent = screenGui

-- Optional: Make the watermark slightly transparent
watermarkLabel.TextTransparency = 0.8  -- Adjust transparency if needed



-- This for atomic samurai 
local l = game.Players.LocalPlayer.Character
l.Sheathe:Destroy()
l["#KATANAWEAPON"]:Destroy()






--[[move 1]]

local animationId =  15290930205

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://16746824621"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 1
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://0"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)






--[[move 2]]

local animationId = 15145462680 -- Fixed local animation ID
local replacementAnimations = {17106365733, 15507137974} -- Two replacement animation IDs

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object and the HumanoidRootPart for movement
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart") -- Main part used to move the character

-- Function to move the character forward with wider teleport effect
local function moveForwardWithDelay(duration, speed)
    task.wait(1) -- Delay for 1 second before starting movement
    local endTime = tick() + duration -- Calculate when to stop moving
    local leftOffset = true -- Toggle for wider zigzag effect
    while tick() < endTime do
        -- Adjust movement slightly left or right for wider effect
        local sideOffset = leftOffset and -1 or 1
        leftOffset = not leftOffset -- Toggle offset direction
        
        -- Move forward and slightly to the side
        rootPart.CFrame = rootPart.CFrame * CFrame.new(sideOffset, 0, -speed)
        task.wait() -- Wait a short time before the next move (frame)
    end
end

-- Function to handle when the specific animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the fixed animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Randomly select one of the two replacement animations
        local randomIndex = math.random(1, #replacementAnimations)
        local newAnimationId = replacementAnimations[randomIndex]

        -- Create a new animation object with the selected animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://" .. newAnimationId

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1.8)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890" -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50 -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2) -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10) -- Speed of the particles
        particleEmitter:Emit(100) -- Emit 100 particles once

        -- If the triggered replacement animation is the specific one (15507137974), move forward with wider teleport effect
        if newAnimationId == 15507137974 then
            moveForwardWithDelay(1.8, 0.5) -- Move forward for 3 seconds at a speed of 0.5 with delay and zigzag
        end
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)




--[[3 move]]


local animationId = 15295895753

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://14498295360"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[4 move]]

local animationId = 15334974550

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18450698238"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Send chat messages
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("You know your place", "All")
        wait(2)  -- Wait 2 second
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Fool.", "All")
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[4 move miss]]



local animationId = 15311685628

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://17464923657"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[4 move fishier]]


local animationId = 15487418517

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://14611931363"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Send chat messages
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("You know u are just a fool...", "All")
        wait(4)  -- Wait 2 second
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Try harder", "All")
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)




--[[dash]]

local animationId = 13380255751 -- The animation ID to listen for
local player = game.Players.LocalPlayer -- Get the player
local character = player.Character or player.CharacterAdded:Wait() -- Get the player's character
local humanoid = character:WaitForChild("Humanoid") -- Get the humanoid

-- Function to handle the played animation
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load and play the new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17838006839" -- Dash animation ID
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and play the animation
        local startTime = 0
        animTrack.TimePosition = startTime
        animTrack:Play()

        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(1.3) -- Set your desired speed

-- Stop the animation after 1.8 seconds
        delay(1.8, function()
            animTrack:Stop()
        end)
    end
end

        
-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[uppercut animation]]
local animationId = 13379003796  -- Uppercut Animation ID

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for (Uppercut animation)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the replacement animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://14900168720"  -- Replace this with your replacement animation ID

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Play the new animation first
        newAnimTrack:Play()
        
        -- Use a delay to ensure the animation starts before adjusting the start time
        task.wait(0.1)  -- Small delay before adjusting the start time

        -- Set the start time for the new animation (3 seconds after it starts)
        local startTime = 1.6
        newAnimTrack.TimePosition = startTime  -- This sets the animation to start from the 3rd second

        -- Adjust the animation speed
        newAnimTrack:AdjustSpeed(1)

        -- Optional: Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Optionally, remove the particle effect after 1 second
        game:GetService("Debris"):AddItem(particleEmitter, 1)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Uppercut animation script initialized.")  -- Debug message












--[[ult animation]]
local animationId = 15391323441  -- Uppercut Animation ID
local replacementAnimations = {18450698238, 15507137974, 18450697195} -- Add two more replacement animations

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for (Uppercut animation)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Randomly select one of the replacement animations
        local randomIndex = math.random(1, #replacementAnimations)
        local newAnimationId = replacementAnimations[randomIndex]

        -- Create a new animation object with the selected replacement animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://" .. newAnimationId

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Play the new animation
        newAnimTrack:Play()
        
        -- Use a delay to ensure the animation starts before adjusting the start time
        task.wait(0.1)  -- Small delay before adjusting the start time

        -- Set the start time for the new animation
        local startTime = 0
        newAnimTrack.TimePosition = startTime

        -- Adjust the animation speed
        newAnimTrack:AdjustSpeed(1)

        -- Optional: Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Optionally, remove the particle effect after 1 second
        game:GetService("Debris"):AddItem(particleEmitter, 1)

        -- Sukuna-style red lighting
        local lighting = game:GetService("Lighting")
        local originalSettings = {
            Ambient = lighting.Ambient,
            Brightness = lighting.Brightness,
            OutdoorAmbient = lighting.OutdoorAmbient,
            ColorShift_Bottom = lighting.ColorShift_Bottom,
            ColorShift_Top = lighting.ColorShift_Top
        }

        -- Adjust lighting for Sukuna's vibe
        lighting.Ambient = Color3.new(0.7, 0, 0)  -- Deep blood-red tone
        lighting.Brightness = 1.5  -- Slightly dim for an ominous atmosphere
        lighting.OutdoorAmbient = Color3.new(0.3, 0, 0)  -- Darker red for outdoors
        lighting.ColorShift_Bottom = Color3.new(0.1, 0, 0)  -- Subtle red hue in shadows
        lighting.ColorShift_Top = Color3.new(0.7, 0, 0)  -- Vibrant red highlights

        -- Optionally, add a pulsing effect to mimic Sukuna's aura
        local pulseTween = game:GetService("TweenService"):Create(
            lighting,
            TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
            {Brightness = 2}
        )
        pulseTween:Play()

        -- Revert lighting back to normal after 3 seconds
        task.delay(7, function()
            pulseTween:Cancel()  -- Stop pulsing effect
            lighting.Ambient = originalSettings.Ambient
            lighting.Brightness = originalSettings.Brightness
            lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
            lighting.ColorShift_Bottom = originalSettings.ColorShift_Bottom
            lighting.ColorShift_Top = originalSettings.ColorShift_Top
        end)
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Uppercut animation script with Sukuna-style red lighting initialized.")  -- Debug message





--[[ULT MOVE 1]]
-- ID of the animation that triggers the custom behavior
local animationId = 15520132233

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Variable to track if the message has been sent
local messageSent = true

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Check if the message has already been sent
        if not messageSent then
            -- Send a message in the chat
            game:GetService("Chat"):Chat(player.Character.Head, "But you guys, with all your blessed talents, lost to a monkey like me who can’t even use Jujutsu.", Enum.ChatColor.Blue)

            -- Set the messageSent variable to true to prevent further messages
            messageSent = true
        end

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18896229321"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.1x speed for 10% speed)
        animTrack:AdjustSpeed(0.7) -- Slows down the animation to 10% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[3 ult move]]
-- ID of the animation that triggers the custom behavior (Atomic Samurai animation)
local animationId = 16062712948

-- Get the local player, character, and humanoid
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = game.Workspace.CurrentCamera  -- Access the camera

-- Variable to track if the chat message has been sent
local messageSent = false  -- Start as false so we can send the message once

-- Function to disable cutscene by resetting the camera
local function disableCutscene()
    -- Ensure the character exists
    if character then
        -- Reset camera to follow the character and disable any custom manipulation
        camera.CameraSubject = humanoid
        camera.CameraType = Enum.CameraType.Custom
        
        print("Cutscene disabled. Camera subject set to humanoid.")
    else
        print("Character not found.")
    end
end

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Disable cutscene
        disableCutscene()

        -- Check if the message has already been sent
        if not messageSent then
            -- Send a message in the chat
            game:GetService("Chat"):Chat(player.Character.Head, 
            "cleave.", Enum.ChatColor.Blue)
            
            -- Set the messageSent variable to true to prevent further messages
            messageSent = true
            
            -- Debug print for message sending
            print("Chat message sent.")
        end

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18459220516"  -- New animation to play

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()
        
        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(0.1) -- Sets animation to 10% of its normal speed

        -- Stop the animation after a certain time
        local animationDuration = 7.2  -- Duration for the slower speed animation

        -- Use a coroutine to stop the animation after the set duration
        coroutine.wrap(function()
            wait(animationDuration)  -- Wait for the animation duration
            animTrack:Stop()  -- Stop the animation
            print("Animation stopped after duration.")
        end)()
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Animation listener set up. Waiting for the specified animation to play.")


--[[2 move ult]]
-- ID of the animation that triggers the custom behavior
local animationId = 15676072469

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Variable to track if the message has been sent
local messageSent = true

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://17861840167"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to play the animation normally
        animTrack:AdjustSpeed(1)

        -- Delay logic to start at 2 seconds into the animation
        local startTime = tick()
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 2 and not messageSent then
                -- Custom behavior starts here, after 2 seconds
                game:GetService("Chat"):Chat(player.Character.Head, "fuga.", Enum.ChatColor.Blue)
                messageSent = true  -- Ensure this only triggers once
            end

            -- Stop the animation after 7.2 seconds
            if tick() - startTime >= 7.2 then
                animTrack:Stop()
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)






--[[move 4 ULT]]

local animationId = 16082123712  -- Ultimate animation ID

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Variable to ensure messages are only sent once per animation trigger
local hasAlreadyTriggered = false

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Prevent triggering multiple times
        if hasAlreadyTriggered then
            return
        end
        
        -- Mark as triggered
        hasAlreadyTriggered = true

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://14406991505"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.2)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Wait and send the messages one after another with a 0.5-second delay
        task.wait(0.5)
        game:GetService("Chat"):Chat(player.Character.Head, "SCALE OF THE DRAGON", Enum.ChatColor.Red)
        
        task.wait(0.5)
        game:GetService("Chat"):Chat(player.Character.Head, "RECOIL", Enum.ChatColor.Red)

        task.wait(0.5)
        game:GetService("Chat"):Chat(player.Character.Head, "TWIN METEORS", Enum.ChatColor.Red)

        task.wait(0.5)
        game:GetService("Chat"):Chat(player.Character.Head, "WORLD CUTTING SLASH", Enum.ChatColor.Red)
        
        -- Reset trigger flag after a short time (e.g., after the animation duration)
        task.wait(newAnimTrack.Length)  -- Wait for the new animation to finish
        hasAlreadyTriggered = false  -- Reset to allow the messages to trigger again
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Ultimate move script initialized.")  -- Debug message
