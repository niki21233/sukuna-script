--sukuna
print (enjoi)
local player = game.Players.LocalPlayer
local char = player.Character
local Humanoid = char.Humanoid
local hot = player.PlayerGui:WaitForChild("Hotbar")
local hotbar = hot:WaitForChild("Backpack"):WaitForChild("Hotbar")
-- 14516273501

local function cloneToolName(slot, text)
    local toolName = slot.ToolName
    if not slot:FindFirstChild("SkibidiGame") then
        toolName.Visible = false
        local clone = toolName:Clone()
        clone.Name = "SkibidiGame"
        clone.Parent = slot
        clone.Text = text
        clone.Visible = true
    elseif slot:FindFirstChild("SkibidiGame") then
        if slot:FindFirstChild("SkibidiGame").Text ~= text then
            toolName.Visible = false
            slot:FindFirstChild("SkibidiGame").Text = text
        end
    end
end
-- 10470104242
local magichealth = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth")
local UltLabel = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth"):WaitForChild("TextLabel")
UltLabel.Visible = false
local UltLabel = UltLabel:Clone()
UltLabel.Visible = true
UltLabel.Name = "SkibidiRizzlerGyattOhio"
UltLabel.Parent = magichealth
task.spawn(function()
    while true do
     UltLabel.Text = "king of curses"
        for _, slot in ipairs(hotbar:GetChildren()) do
            if slot:FindFirstChild("Base") and slot.Base:FindFirstChild("ToolName") then
                local toolNameText = slot.Base.ToolName.Text
                if toolNameText == "Quick Slice" then
                    cloneToolName(slot.Base, "dismantle")
                elseif toolNameText == "Atmos Cleave" then
                    cloneToolName(slot.Base, "cleave grab")
                elseif toolNameText == "Pinpoint Cut" then
                    cloneToolName(slot.Base, "cleave")
                elseif toolNameText == "Split Second Counter" then
                    cloneToolName(slot.Base, "cleave counter")
                elseif toolNameText == "Sunset" then
                    cloneToolName(slot.Base, "fire combo")
                elseif toolNameText == "Solar Cleave" then
                    cloneToolName(slot.Base, "fuga")
                elseif toolNameText == "Sunrise" then
                    cloneToolName(slot.Base, "dismantle domain")
                elseif toolNameText == "Atomic Slash" then
                    cloneToolName(slot.Base, "world slash")
                end
            end
        end
        task.wait(1)
    end
end)
-- Create a ScreenGui
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WatermarkGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a TextLabel for the watermark
local watermarkLabel = Instance.new("TextLabel")
watermarkLabel.Name = "WatermarkLabel"
watermarkLabel.Text = "sukuna by beluganiki on discord version 1"  -- Customize your watermark text here
watermarkLabel.Font = Enum.Font.SourceSans
watermarkLabel.TextSize = 24  -- Set the size of the text
watermarkLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White color
watermarkLabel.BackgroundTransparency = 1  -- Make the background transparent
watermarkLabel.Position = UDim2.new(0.5, 0, 0, 10)  -- Position it at the top center
watermarkLabel.AnchorPoint = Vector2.new(0.5, 0)  -- Center the anchor point horizontally
watermarkLabel.Parent = screenGui

-- Optional: Make the watermark slightly transparent
watermarkLabel.TextTransparency = 0.8  -- Adjust transparency if needed


--[[move 1]]

local animationId =  15290930205

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://16746824621"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://0"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 2]]

local animationId = 15145462680

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://15446959450"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[3 move]]


local animationId = 15295895753

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://13073745835"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.5)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[4 move]]

local animationId = 15334974550

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18450698238"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

        -- Send chat messages
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("You know your place", "All")
        wait(2)  -- Wait 2 second
        game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Fool.", "All")
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[4 move miss]]



local animationId = 15311685628

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://17464923657"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)




--[[dash]]

local animationId = 13380255751 -- The animation ID to listen for
local player = game.Players.LocalPlayer -- Get the player
local character = player.Character or player.CharacterAdded:Wait() -- Get the player's character
local humanoid = character:WaitForChild("Humanoid") -- Get the humanoid

-- Function to handle the played animation
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the desired animation ID
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Load and play the new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://17838006839" -- Dash animation ID
        local animTrack = humanoid:LoadAnimation(newAnim)

        -- Set the start time and play the animation
        local startTime = 0
        animTrack.TimePosition = startTime
        animTrack:Play()

        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(1.3) -- Set your desired speed

-- Stop the animation after 1.8 seconds
        delay(1.8, function()
            animTrack:Stop()
        end)
    end
end

        
-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)




--[[ult]]
-- Animation IDs
local newAnimationId = "rbxassetid://18459220516" -- The ID of the main animation to play
local triggerAnimationId = "rbxassetid://18716880183" -- ID of the animation to trigger the repeat loop

-- Get the local player, character, and camera
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = game.Workspace.CurrentCamera

-- Function to create and attach a particle effect
local function createParticleEffect(particleTextureId)
    local particleEmitter = Instance.new("ParticleEmitter")
    particleEmitter.Texture = particleTextureId  -- Set the particle texture ID from the parameter
    particleEmitter.Parent = character.Head  -- Attach to the player's head
    particleEmitter.Rate = 100  -- Increase the number of particles emitted per second
    particleEmitter.Lifetime = NumberRange.new(0.5, 1.5)  -- How long particles last
    particleEmitter.Speed = NumberRange.new(10, 20)  -- Speed of the particles
    particleEmitter.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 0, 255))  -- Red to Blue
    particleEmitter:Emit(100)  -- Emit 100 particles once
    return particleEmitter
end

-- Function to lock the camera in front of the player’s torso and look at the player
local function lockCameraInFront()
    local torso = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")  -- Ensure compatibility with R6 or R15

    if torso then
        local offset = Vector3.new(0, 2, -5)  -- Adjust offset as desired: 2 units up and 5 units in front
        local cameraPosition = torso.CFrame:PointToWorldSpace(offset) -- Position in front of the torso
        camera.CameraType = Enum.CameraType.Scriptable
        camera.CFrame = CFrame.new(cameraPosition, torso.Position)  -- Look at the torso from the offset position
    end
end

-- Function to forcibly play a new animation
local function forcePlayAnimation()
    -- Debug message
    print("Forcibly playing new animation.")

    -- Create and load the new animation
    local newAnim = Instance.new("Animation")
    newAnim.AnimationId = newAnimationId
    local newAnimTrack = humanoid:LoadAnimation(newAnim)

    -- Stop all currently playing animations
    for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
        animTrack:Stop()
        print("Stopped animation: " .. animTrack.Animation.AnimationId)
    end

    -- Play the new animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1) -- Adjust speed as desired
    print("Playing new animation: " .. newAnimationId)

    -- Lock the camera in front of the player
    lockCameraInFront()

    return newAnimTrack -- Return the track to allow for stopping later
end

-- Function to start repeating animation trigger
local function startRepeatingAnimation(particleTextureId)
    print("Started repeating animation trigger.")

    -- Play the trigger animation once to start
    local triggerAnim = Instance.new("Animation")
    triggerAnim.AnimationId = triggerAnimationId
    local triggerAnimTrack = humanoid:LoadAnimation(triggerAnim)
    triggerAnimTrack:Play()

    -- Create particle effect with the specified texture ID
    local particleEmitter = createParticleEffect(particleTextureId)

    -- Start a loop to repeatedly "press" the G key
    local repeatLoop = true
    local loopEndTime = tick() + 6 -- Stop after 6 seconds
    local animTrack = nil

    spawn(function()
        while repeatLoop do
            -- Trigger the G key function and store the animation track
            animTrack = forcePlayAnimation()

            -- Check if the time has exceeded 6 seconds
            if tick() >= loopEndTime then
                repeatLoop = false
                print("Stopping repeated animation trigger after 6 seconds.")

                -- Stop the animation track explicitly
                if animTrack then
                    animTrack:Stop()
                    print("Stopped animation track after 6 seconds.")
                end

                -- Reset camera to default behavior
                camera.CameraType = Enum.CameraType.Custom

                -- Clean up the particle emitter after the effect
                particleEmitter:Destroy()
            end

            wait(0.5) -- Short delay to avoid spamming too quickly
        end
    end)
end

-- Bind the function to the key press (e.g., "G") to start the repeating sequence
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.G then
        local particleTextureId = "rbxassetid://18618934824"  -- Replace with your desired particle texture ID
        startRepeatingAnimation(particleTextureId)
    end
end)

print("Press 'G' to start the repeating animation trigger for 6 seconds.")





--[[ULT MOVE 1]]
-- ID of the animation that triggers the custom behavior
local animationId = 15520132233

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Variable to track if the message has been sent
local messageSent = true

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Check if the message has already been sent
        if not messageSent then
            -- Send a message in the chat
            game:GetService("Chat"):Chat(player.Character.Head, "But you guys, with all your blessed talents, lost to a monkey like me who can’t even use Jujutsu.", Enum.ChatColor.Blue)

            -- Set the messageSent variable to true to prevent further messages
            messageSent = true
        end

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18896229321"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.1x speed for 10% speed)
        animTrack:AdjustSpeed(0.7) -- Slows down the animation to 10% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[3 ult move]]
-- ID of the animation that triggers the custom behavior (Atomic Samurai animation)
local animationId = 16062712948

-- Get the local player, character, and humanoid
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = game.Workspace.CurrentCamera  -- Access the camera

-- Variable to track if the chat message has been sent
local messageSent = false  -- Start as false so we can send the message once

-- Function to disable cutscene by resetting the camera
local function disableCutscene()
    -- Ensure the character exists
    if character then
        -- Reset camera to follow the character and disable any custom manipulation
        camera.CameraSubject = humanoid
        camera.CameraType = Enum.CameraType.Custom
        
        print("Cutscene disabled. Camera subject set to humanoid.")
    else
        print("Character not found.")
    end
end

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Disable cutscene
        disableCutscene()

        -- Check if the message has already been sent
        if not messageSent then
            -- Send a message in the chat
            game:GetService("Chat"):Chat(player.Character.Head, 
            "cleave.", Enum.ChatColor.Blue)
            
            -- Set the messageSent variable to true to prevent further messages
            messageSent = true
            
            -- Debug print for message sending
            print("Chat message sent.")
        end

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18459220516"  -- New animation to play

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()
        
        -- Adjust the speed of the animation
        animTrack:AdjustSpeed(0.1) -- Sets animation to 10% of its normal speed

        -- Stop the animation after a certain time
        local animationDuration = 7.2  -- Duration for the slower speed animation

        -- Use a coroutine to stop the animation after the set duration
        coroutine.wrap(function()
            wait(animationDuration)  -- Wait for the animation duration
            animTrack:Stop()  -- Stop the animation
            print("Animation stopped after duration.")
        end)()
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

print("Animation listener set up. Waiting for the specified animation to play.")


--[[2 ult move]]

-- ID of the animation that triggers the custom behavior
local animationId = 15676072469

-- Get the local player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Variable to track if the message has been sent
local messageSent = true

-- Function that runs when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the played animation matches the target animationId
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Check if the message has already been sent
        if not messageSent then
            -- Send a message in the chat
            game:GetService("Chat"):Chat(player.Character.Head, "But you guys, with all your blessed talents, lost to a monkey like me who can’t even use Jujutsu.", Enum.ChatColor.Blue)

            -- Set the messageSent variable to true to prevent further messages
            messageSent = true
        end

        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation instance for the new animation
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://16746746641"

        -- Load and play the new animation
        local animTrack = humanoid:LoadAnimation(newAnimation)
        animTrack:Play()

        -- Adjust the speed to make the animation very slow (0.1x speed for 10% speed)
        animTrack:AdjustSpeed(0.1) -- Slows down the animation to 10% of its normal speed

        -- Connect the 'Stopped' event to know when to stop the animation manually
        animTrack.Stopped:Connect(function()
            animTrack:Stop()
        end)

        -- Stop the animation after a certain time using `RunService` for frame updates.
        local startTime = tick()  -- Get current time
        game:GetService("RunService").RenderStepped:Connect(function()
            if tick() - startTime >= 7.2 then -- Increase the time to match the slower speed
                animTrack:Stop()  -- Stop the animation after 7.2 seconds (since it's very slow)
            end
        end)
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[wall combo]]


local animationId = 15997042291

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://16139108718"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.5)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[3 base move air var]]




local animationId = 15271263467

-- Get the local player
local player = game.Players.LocalPlayer

-- Wait for the player's character to load
local character = player.Character or player.CharacterAdded:Wait()

-- Get the humanoid object from the character
local humanoid = character:WaitForChild("Humanoid")

-- Function to handle when any animation is played
local function onAnimationPlayed(animationTrack)
    -- Check if the animation ID matches the one you're looking for
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop all currently playing animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create a new animation object with the new animation ID
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://17292579443"

        -- Load the animation into the humanoid
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Optional: Adjust the animation speed and start time
        local startTime = 0
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.5)
        newAnimTrack.TimePosition = startTime

        -- Add particle effect
        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Texture = "rbxassetid://1234567890"  -- Replace with your particle texture ID
        particleEmitter.Parent = character.Head  -- Attach to the player's head (or any other part)
        particleEmitter.Rate = 50  -- Number of particles per second
        particleEmitter.Lifetime = NumberRange.new(1, 2)  -- How long particles last
        particleEmitter.Speed = NumberRange.new(5, 10)  -- Speed of the particles
        particleEmitter:Emit(100)  -- Emit 100 particles once

                end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)














HideWeapon = true
